{"ast":null,"code":"import React from\"react\";import{ProjectStatus}from\"../model/todo.model\";import\"./TodoListLayout.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TodoListLayout=function TodoListLayout(_ref){var type=_ref.type,children=_ref.children,changeTodoStateDrag=_ref.changeTodoStateDrag;var isActive=type===\"active\";var contentToRender=children.props.items.length===0?isActive?/*#__PURE__*/_jsx(\"p\",{children:\"Start being productive! Add some todos.\"}):/*#__PURE__*/_jsx(\"p\",{children:\"Well done! You completed all your tasks.\"}):children;var dragOverHandler=function dragOverHandler(event){if(event.dataTransfer&&event.dataTransfer.types[0]===\"todo_id\"){event.preventDefault();event.stopPropagation();event.currentTarget.classList.add(\"drag-target-active\");}return false;};var dropHandler=function dropHandler(event){event.preventDefault();var todoId=event.dataTransfer.getData(\"todo_id\");var layoutClass=event.currentTarget.classList[1];var status=ProjectStatus.Active;if(layoutClass===\"finished\"){status=ProjectStatus.Finished;}changeTodoStateDrag(todoId,status);event.currentTarget.classList.remove(\"drag-target-active\");};var dragLeaveHandler=function dragLeaveHandler(event){event.currentTarget.classList.remove(\"drag-target-active\");};return/*#__PURE__*/_jsxs(\"div\",{className:\"todos-layout \".concat(isActive?\"layout-active\":\"layout-finished\"),onDragOver:function onDragOver(event){return dragOverHandler(event);},onDrop:function onDrop(event){return dropHandler(event);},onDragLeave:function onDragLeave(event){return dragLeaveHandler(event);},children:[/*#__PURE__*/_jsx(\"h2\",{className:isActive?\"active-layout-heading\":\"finished-layout-heading\",children:isActive?\"ACTIVE TODOS\":\"FINISHED TODOS\"}),contentToRender]});};export default TodoListLayout;","map":{"version":3,"sources":["C:/DRIVER D/BIT JS/typescript projects/todo-app/src/ui/TodoListLayout.tsx"],"names":["React","ProjectStatus","TodoListLayout","type","children","changeTodoStateDrag","isActive","contentToRender","props","items","length","dragOverHandler","event","dataTransfer","types","preventDefault","stopPropagation","currentTarget","classList","add","dropHandler","todoId","getData","layoutClass","status","Active","Finished","remove","dragLeaveHandler"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAiC,OAAjC,CACA,OAASC,aAAT,KAA8B,qBAA9B,CAEA,MAAO,sBAAP,C,wFAUA,GAAMC,CAAAA,cAAyC,CAAG,QAA5CA,CAAAA,cAA4C,MAI5C,IAHJC,CAAAA,IAGI,MAHJA,IAGI,CAFJC,QAEI,MAFJA,QAEI,CADJC,mBACI,MADJA,mBACI,CACJ,GAAMC,CAAAA,QAAQ,CAAGH,IAAI,GAAK,QAA1B,CAEA,GAAMI,CAAAA,eAAe,CACnBH,QAAQ,CAACI,KAAT,CAAeC,KAAf,CAAqBC,MAArB,GAAgC,CAAhC,CACEJ,QAAQ,cACN,8DADM,cAGN,+DAJJ,CAOEF,QARJ,CAWA,GAAMO,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAACC,KAAD,CAAsB,CAC5C,GAAIA,KAAK,CAACC,YAAN,EAAsBD,KAAK,CAACC,YAAN,CAAmBC,KAAnB,CAAyB,CAAzB,IAAgC,SAA1D,CAAqE,CACnEF,KAAK,CAACG,cAAN,GACAH,KAAK,CAACI,eAAN,GACCJ,KAAK,CAACK,aAAP,CAAwCC,SAAxC,CAAkDC,GAAlD,CACE,oBADF,EAGD,CACD,MAAO,MAAP,CACD,CATD,CAWA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACR,KAAD,CAAsB,CACxCA,KAAK,CAACG,cAAN,GACA,GAAMM,CAAAA,MAAM,CAAGT,KAAK,CAACC,YAAN,CAAmBS,OAAnB,CAA2B,SAA3B,CAAf,CACA,GAAMC,CAAAA,WAAW,CAAIX,KAAK,CAACK,aAAP,CAAwCC,SAAxC,CAAkD,CAAlD,CAApB,CACA,GAAIM,CAAAA,MAAM,CAAGvB,aAAa,CAACwB,MAA3B,CACA,GAAIF,WAAW,GAAK,UAApB,CAAgC,CAC9BC,MAAM,CAAGvB,aAAa,CAACyB,QAAvB,CACD,CACDrB,mBAAmB,CAACgB,MAAD,CAASG,MAAT,CAAnB,CACCZ,KAAK,CAACK,aAAP,CAAwCC,SAAxC,CAAkDS,MAAlD,CACE,oBADF,EAGD,CAZD,CAcA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAAChB,KAAD,CAAsB,CAC5CA,KAAK,CAACK,aAAP,CAAwCC,SAAxC,CAAkDS,MAAlD,CACE,oBADF,EAGD,CAJD,CAMA,mBACE,aACE,SAAS,wBACPrB,QAAQ,CAAG,eAAH,CAAqB,iBADtB,CADX,CAIE,UAAU,CAAE,oBAACM,KAAD,QAAWD,CAAAA,eAAe,CAACC,KAAD,CAA1B,EAJd,CAKE,MAAM,CAAE,gBAACA,KAAD,QAAWQ,CAAAA,WAAW,CAACR,KAAD,CAAtB,EALV,CAME,WAAW,CAAE,qBAACA,KAAD,QAAWgB,CAAAA,gBAAgB,CAAChB,KAAD,CAA3B,EANf,wBAQE,WACE,SAAS,CACPN,QAAQ,CAAG,uBAAH,CAA6B,yBAFzC,UAKGA,QAAQ,CAAG,cAAH,CAAoB,gBAL/B,EARF,CAeGC,eAfH,GADF,CAmBD,CApED,CAsEA,cAAeL,CAAAA,cAAf","sourcesContent":["import React, { DragEvent } from \"react\";\r\nimport { ProjectStatus } from \"../model/todo.model\";\r\n\r\nimport \"./TodoListLayout.css\";\r\n\r\ninterface ListLayoutProps {\r\n  children: {\r\n    props: object;\r\n  };\r\n  type: \"active\" | \"finished\";\r\n  changeTodoStateDrag: (todoId: string, status: ProjectStatus) => void;\r\n}\r\n\r\nconst TodoListLayout: React.FC<ListLayoutProps> = ({\r\n  type,\r\n  children,\r\n  changeTodoStateDrag,\r\n}) => {\r\n  const isActive = type === \"active\";\r\n\r\n  const contentToRender =\r\n    children.props.items.length === 0 ? (\r\n      isActive ? (\r\n        <p>Start being productive! Add some todos.</p>\r\n      ) : (\r\n        <p>Well done! You completed all your tasks.</p>\r\n      )\r\n    ) : (\r\n      children\r\n    );\r\n\r\n  const dragOverHandler = (event: DragEvent) => {\r\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"todo_id\") {\r\n      event.preventDefault();\r\n      event.stopPropagation();\r\n      (event.currentTarget as HTMLDivElement).classList.add(\r\n        \"drag-target-active\"\r\n      );\r\n    }\r\n    return false;\r\n  };\r\n\r\n  const dropHandler = (event: DragEvent) => {\r\n    event.preventDefault();\r\n    const todoId = event.dataTransfer.getData(\"todo_id\");\r\n    const layoutClass = (event.currentTarget as HTMLDivElement).classList[1];\r\n    let status = ProjectStatus.Active;\r\n    if (layoutClass === \"finished\") {\r\n      status = ProjectStatus.Finished;\r\n    }\r\n    changeTodoStateDrag(todoId, status);\r\n    (event.currentTarget as HTMLDivElement).classList.remove(\r\n      \"drag-target-active\"\r\n    );\r\n  };\r\n\r\n  const dragLeaveHandler = (event: DragEvent) => {\r\n    (event.currentTarget as HTMLDivElement).classList.remove(\r\n      \"drag-target-active\"\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`todos-layout ${\r\n        isActive ? \"layout-active\" : \"layout-finished\"\r\n      }`}\r\n      onDragOver={(event) => dragOverHandler(event)}\r\n      onDrop={(event) => dropHandler(event)}\r\n      onDragLeave={(event) => dragLeaveHandler(event)}\r\n    >\r\n      <h2\r\n        className={\r\n          isActive ? \"active-layout-heading\" : \"finished-layout-heading\"\r\n        }\r\n      >\r\n        {isActive ? \"ACTIVE TODOS\" : \"FINISHED TODOS\"}\r\n      </h2>\r\n      {contentToRender}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoListLayout;\r\n"]},"metadata":{},"sourceType":"module"}