{"ast":null,"code":"import React,{useRef}from\"react\";import{useClickOutside}from\"../hooks/useClickOutside\";import{ProjectStatus}from\"../model/todo.model\";import{filterTodos}from\"../util/util-functions\";import NewTodo from\"./NewTodo\";import\"./TodoList.css\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var TodoList=function TodoList(_ref){var list=_ref.list,items=_ref.items,onToggleTodoStatus=_ref.onToggleTodoStatus,onDeleteTodo=_ref.onDeleteTodo,_onEditableTodo=_ref.onEditableTodo,onUpdateTodo=_ref.onUpdateTodo,onClickOutside=_ref.onClickOutside;var dragStartHandler=function dragStartHandler(event,todoId){event.dataTransfer.setData(\"todo_id\",todoId);event.dataTransfer.effectAllowed=\"move\";};var filteredTodos=[];var noTodos=/*#__PURE__*/_jsx(\"li\",{});if(list===\"active\"){filteredTodos=filterTodos(items,ProjectStatus.Active);noTodos=/*#__PURE__*/_jsxs(\"li\",{children:[\"Start being productive today.\",/*#__PURE__*/_jsx(\"br\",{}),\" Add some tasks to your list.\"]});}else{filteredTodos=filterTodos(items,ProjectStatus.Finished);noTodos=/*#__PURE__*/_jsx(\"li\",{children:\"All finished. Well done!\"});}var ulRef=useRef(null);useClickOutside(ulRef,onClickOutside);return/*#__PURE__*/_jsx(\"ul\",{ref:list===\"active\"?ulRef:null,children:filteredTodos.length!==0?filteredTodos.map(function(todo){return!todo.isEditable?/*#__PURE__*/_jsxs(\"li\",{draggable:\"true\",className:\"todo \".concat(todo.status===0?\"active-todo\":\"finished-todo\"),onDragStart:function onDragStart(event){return dragStartHandler(event,todo.id);},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"todo-primary-info\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{checked:todo.status===0?false:true,type:\"checkbox\",className:todo.priority,onChange:function onChange(event){onToggleTodoStatus(todo.id,todo.status,event);}}),/*#__PURE__*/_jsx(\"span\",{className:\"draggable\",children:\"\\u205D\\u205D\"}),/*#__PURE__*/_jsx(\"div\",{children:todo.text})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"actions\",children:[/*#__PURE__*/_jsx(\"button\",{\"data-tooltip\":\"Edit\",className:\"edit__btn\",onClick:_onEditableTodo.bind(null,todo.id),children:\"\\u270E\"}),/*#__PURE__*/_jsx(\"button\",{\"data-tooltip\":\"Delete\",className:\"delete__btn\",onClick:onDeleteTodo.bind(null,todo.id),children:\"\\u2716\"})]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"todo-secondary-info\",children:/*#__PURE__*/_jsx(\"span\",{children:todo.date})})]},todo.id):/*#__PURE__*/_jsx(\"li\",{children:/*#__PURE__*/_jsx(NewTodo,{type:\"edit\",submitTodo:onUpdateTodo,todo:todo,onEditableTodo:function onEditableTodo(){return _onEditableTodo(todo.id);}})},todo.id);}):noTodos});};export default TodoList;","map":{"version":3,"sources":["C:/DRIVER D/BIT JS/typescript projects/todo-app/src/components/TodoList.tsx"],"names":["React","useRef","useClickOutside","ProjectStatus","filterTodos","NewTodo","TodoList","list","items","onToggleTodoStatus","onDeleteTodo","onEditableTodo","onUpdateTodo","onClickOutside","dragStartHandler","event","todoId","dataTransfer","setData","effectAllowed","filteredTodos","noTodos","Active","Finished","ulRef","length","map","todo","isEditable","status","id","priority","text","bind","date"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, DragEvent, useRef } from \"react\";\r\nimport { useClickOutside } from \"../hooks/useClickOutside\";\r\nimport { ProjectStatus, Todo } from \"../model/todo.model\";\r\nimport { filterTodos } from \"../util/util-functions\";\r\nimport NewTodo from \"./NewTodo\";\r\n\r\nimport \"./TodoList.css\";\r\n\r\ninterface TodoListProps {\r\n  list: string;\r\n  items: Todo[];\r\n  onToggleTodoStatus: (\r\n    id: string,\r\n    newStatus: ProjectStatus,\r\n    event: ChangeEvent\r\n  ) => void;\r\n  onDeleteTodo: (id: string) => void;\r\n  onEditableTodo: (id: string) => void;\r\n  onUpdateTodo: (\r\n    text: string,\r\n    date: Date,\r\n    priority: string,\r\n    id?: string\r\n  ) => void;\r\n  onClickOutside: (event: MouseEvent) => void;\r\n}\r\n\r\nconst TodoList: React.FC<TodoListProps> = ({\r\n  list,\r\n  items,\r\n  onToggleTodoStatus,\r\n  onDeleteTodo,\r\n  onEditableTodo,\r\n  onUpdateTodo,\r\n  onClickOutside,\r\n}) => {\r\n  const dragStartHandler = (\r\n    event: DragEvent<HTMLLIElement>,\r\n    todoId: string\r\n  ) => {\r\n    event.dataTransfer.setData(\"todo_id\", todoId);\r\n    event.dataTransfer.effectAllowed = \"move\";\r\n  };\r\n\r\n  let filteredTodos: Todo[] = [];\r\n  let noTodos = <li></li>;\r\n\r\n  if (list === \"active\") {\r\n    filteredTodos = filterTodos(items, ProjectStatus.Active);\r\n    noTodos = (\r\n      <li>\r\n        Start being productive today.\r\n        <br /> Add some tasks to your list.\r\n      </li>\r\n    );\r\n  } else {\r\n    filteredTodos = filterTodos(items, ProjectStatus.Finished);\r\n    noTodos = <li>All finished. Well done!</li>;\r\n  }\r\n\r\n  const ulRef = useRef<HTMLUListElement>(null);\r\n\r\n  useClickOutside(ulRef, onClickOutside);\r\n\r\n  return (\r\n    <ul ref={list === \"active\" ? ulRef : null}>\r\n      {filteredTodos.length !== 0\r\n        ? filteredTodos.map((todo) => {\r\n            return !todo.isEditable ? (\r\n              <li\r\n                draggable=\"true\"\r\n                key={todo.id}\r\n                className={`todo ${\r\n                  todo.status === 0 ? \"active-todo\" : \"finished-todo\"\r\n                }`}\r\n                onDragStart={(event) => dragStartHandler(event, todo.id)}\r\n              >\r\n                <div className=\"todo-primary-info\">\r\n                  <div>\r\n                    <input\r\n                      checked={todo.status === 0 ? false : true}\r\n                      type=\"checkbox\"\r\n                      className={todo.priority}\r\n                      onChange={(event) => {\r\n                        onToggleTodoStatus(todo.id, todo.status, event);\r\n                      }}\r\n                    />\r\n                    <span className=\"draggable\">&#8285;&#8285;</span>\r\n                    <div>{todo.text}</div>\r\n                  </div>\r\n                  <div className=\"actions\">\r\n                    <button\r\n                      data-tooltip=\"Edit\"\r\n                      className=\"edit__btn\"\r\n                      onClick={onEditableTodo.bind(null, todo.id)}\r\n                    >\r\n                      &#9998;\r\n                    </button>\r\n                    <button\r\n                      data-tooltip=\"Delete\"\r\n                      className=\"delete__btn\"\r\n                      onClick={onDeleteTodo.bind(null, todo.id)}\r\n                    >\r\n                      &#10006;\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n                <div className=\"todo-secondary-info\">\r\n                  <span>{todo.date}</span>\r\n                </div>\r\n              </li>\r\n            ) : (\r\n              <li key={todo.id}>\r\n                <NewTodo\r\n                  type=\"edit\"\r\n                  submitTodo={onUpdateTodo}\r\n                  todo={todo}\r\n                  onEditableTodo={() => onEditableTodo(todo.id)}\r\n                />\r\n              </li>\r\n            );\r\n          })\r\n        : noTodos}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n"]},"metadata":{},"sourceType":"module"}