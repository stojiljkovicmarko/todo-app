{"ast":null,"code":"var _jsxFileName = \"C:\\\\DRIVER D\\\\BIT JS\\\\typescript projects\\\\react-typescript-demo\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TodoList from \"./components/TodoList\";\nimport NewTodo from \"./components/NewTodo\";\nimport { ProjectStatus } from \"./model/todo.model\";\nimport TodoListLayout from \"./ui/TodoListLayout\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [todos, setTodos] = useState([{\n    \"23/02/2022\": {\n      active: [{\n        id: 1,\n        text: \"\",\n        active: true\n      }, {\n        id: 4,\n        text: \"\",\n        active: true\n      }],\n      finished: [{\n        id: 2,\n        text: \"\",\n        finished: true\n      }, {\n        id: 3,\n        text: \"\",\n        finished: true\n      }]\n    }\n  }, {\n    \"24/02/2022\": [{\n      id: 1,\n      text: \"\"\n    }, {\n      id: 2,\n      text: \"\"\n    }]\n  }]);\n\n  const todoAddHandler = (text, date) => {\n    setTodos(prevTodos => {\n      return { ...prevTodos,\n        active: [{\n          id: Math.floor(Math.random() * (100000 - 10000) + 10000).toString(),\n          text: text,\n          status: ProjectStatus.Active,\n          date: {\n            day: date.getDate(),\n            month: date.getMonth() + 1,\n            year: date.getFullYear(),\n            fullDate: date\n          },\n          createdOn: new Date()\n        }]\n      };\n    });\n  };\n\n  const todoDeleteHandler = todoId => {\n    setTodos(prevTodos => prevTodos.filter(todo => todo.id !== todoId));\n  };\n\n  const toggleTodoStatus = (todoId, status) => {\n    const todoIndex = todos.findIndex(todo => todo.id === todoId);\n    const newTodos = [...todos];\n    const newTodo = todos[todoIndex];\n    status === ProjectStatus.Active ? newTodo.status = ProjectStatus.Finished : newTodo.status = ProjectStatus.Active;\n    newTodos[todoIndex] = newTodo;\n    setTodos(newTodos);\n  };\n\n  const insertTodoOnNewPosition = index => {// const newTodos = [...todos];\n    //   const todo = newTodos[index];\n    //   newTodos.splice(index, 1);\n    //   newTodos.splice(index, 0, todo);\n    //   setTodos(newTodos);\n  };\n\n  console.log(todos);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(NewTodo, {\n        onAddTodo: todoAddHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoListLayout, {\n        type: \"active\",\n        children: /*#__PURE__*/_jsxDEV(TodoList, {\n          items: todos.active,\n          onChangeTodoStatus: toggleTodoStatus,\n          onDeleteTodo: todoDeleteHandler,\n          insertTodoOnNewPosition: insertTodoOnNewPosition\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TodoListLayout, {\n        type: \"finished\",\n        children: /*#__PURE__*/_jsxDEV(TodoList, {\n          items: todos.finished,\n          onChangeTodoStatus: toggleTodoStatus,\n          onDeleteTodo: todoDeleteHandler,\n          insertTodoOnNewPosition: insertTodoOnNewPosition\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(App, \"72Cuv/PAkbcNH8HHnTRTEubcLQc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/DRIVER D/BIT JS/typescript projects/react-typescript-demo/src/App.tsx"],"names":["React","useState","TodoList","NewTodo","ProjectStatus","TodoListLayout","App","todos","setTodos","active","id","text","finished","todoAddHandler","date","prevTodos","Math","floor","random","toString","status","Active","day","getDate","month","getMonth","year","getFullYear","fullDate","createdOn","Date","todoDeleteHandler","todoId","filter","todo","toggleTodoStatus","todoIndex","findIndex","newTodos","newTodo","Finished","insertTodoOnNewPosition","index","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport TodoList from \"./components/TodoList\";\nimport NewTodo from \"./components/NewTodo\";\n\nimport { ProjectStatus, Todo } from \"./model/todo.model\";\nimport TodoListLayout from \"./ui/TodoListLayout\";\n\n\ninterface Todos {\n\n}\n\nconst App: React.FC = () => {\n  const [todos, setTodos] = useState<{}[]>([\n    {\n      \"23/02/2022\": {\n        active: [\n          { id: 1, text: \"\", active: true},\n          { id: 4, text: \"\", active: true},\n        ],\n        finished: [\n          { id: 2, text: \"\", finished: true},\n          { id: 3, text: \"\", finished: true},\n        ],\n      },\n    },\n    {\n      \"24/02/2022\": [\n        { id: 1, text: \"\" },\n        { id: 2, text: \"\" },\n      ],\n    },\n  ]);\n\n  const todoAddHandler = (text: string, date: Date) => {\n    setTodos((prevTodos) => {\n      return {\n        ...prevTodos,\n        active: [\n          {\n            id: Math.floor(Math.random() * (100000 - 10000) + 10000).toString(),\n            text: text,\n            status: ProjectStatus.Active,\n            date: {\n              day: date.getDate(),\n              month: date.getMonth() + 1,\n              year: date.getFullYear(),\n              fullDate: date,\n            },\n            createdOn: new Date(),\n          },\n        ],\n      };\n    });\n  };\n\n  const todoDeleteHandler = (todoId: string) => {\n    setTodos((prevTodos) => prevTodos.filter((todo) => todo.id !== todoId));\n  };\n\n  const toggleTodoStatus = (todoId: string, status: ProjectStatus) => {\n    const todoIndex = todos.findIndex((todo) => todo.id === todoId);\n    const newTodos = [...todos];\n    const newTodo: Todo = todos[todoIndex];\n    status === ProjectStatus.Active\n      ? (newTodo.status = ProjectStatus.Finished)\n      : (newTodo.status = ProjectStatus.Active);\n    newTodos[todoIndex] = newTodo;\n    setTodos(newTodos);\n  };\n\n  const insertTodoOnNewPosition = (index: number) => {\n    // const newTodos = [...todos];\n    //   const todo = newTodos[index];\n    //   newTodos.splice(index, 1);\n    //   newTodos.splice(index, 0, todo);\n    //   setTodos(newTodos);\n  };\n\n  console.log(todos);\n\n  return (\n    <>\n      <div className=\"App\">\n        <NewTodo onAddTodo={todoAddHandler} />\n        <TodoListLayout type={\"active\"}>\n          <TodoList\n            items={todos.active}\n            onChangeTodoStatus={toggleTodoStatus}\n            onDeleteTodo={todoDeleteHandler}\n            insertTodoOnNewPosition={insertTodoOnNewPosition}\n          />\n        </TodoListLayout>\n        <TodoListLayout type={\"finished\"}>\n          <TodoList\n            items={todos.finished}\n            onChangeTodoStatus={toggleTodoStatus}\n            onDeleteTodo={todoDeleteHandler}\n            insertTodoOnNewPosition={insertTodoOnNewPosition}\n          />\n        </TodoListLayout>\n      </div>\n    </>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}